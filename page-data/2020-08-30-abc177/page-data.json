{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-08-30-abc177/","result":{"data":{"site":{"siteMetadata":{"title":"メンティーのおどり"}},"markdownRemark":{"id":"2589a08f-cb32-5817-811f-1d3651933781","excerpt":"AtCoder Beginner ContestのC問題だけやるシリーズをちょっと始めてみようかな〜と思います。\nなんでC問題だけ解くかというと、初学者がぎりぎり解けそうで解けないのがC問題くらいだから。 使う言語はrubyにします。\nみんながよく使ってるjavascriptかruby…","html":"<p>AtCoder Beginner ContestのC問題だけやるシリーズをちょっと始めてみようかな〜と思います。\nなんでC問題だけ解くかというと、初学者がぎりぎり解けそうで解けないのがC問題くらいだから。</p>\n<p>使う言語はrubyにします。\nみんながよく使ってるjavascriptかrubyで迷ったんですけどjavascriptは入力処理がマゾすぎるのでやめました。\nちゃんと競プロやりたい人はC++がオススメですけど。</p>\n<p>今日やるのは <a href=\"https://atcoder.jp/contests/abc177/tasks/abc177_c\">ABC 177 C - Sum of product of pairs</a></p>\n<h2>問題みて最初に思うこと</h2>\n<blockquote>\n<p>1 &#x3C;= i &#x3C;= i &#x3C;= N を満たす全ての組 (i, j) について</p>\n</blockquote>\n<p>ペアは O(N ** 2) 個あることがわかるけど制約には</p>\n<blockquote>\n<p>2 &#x3C;= N &#x3C;= 2 * 10 ** 5</p>\n</blockquote>\n<p>って書いてあるので二重ループすると計算量が O(4 * 10 ** 10) になっちゃってTLEしますね。\nここを上手になんとかできるかどうかがこの問題のポイントになってるみたい。</p>\n<blockquote>\n<p>Ai * Aj の和を mod 10 ** 9 + 7 で求めてください</p>\n</blockquote>\n<p>これは大きい整数がでるときにあるあるなやつで、オーバーフローでWAになるのイヤなのでちょこちょこmodするだけ。</p>\n<h2>解き方を考える</h2>\n<p>modのことはしばらく忘れて話をするんですけど。\n数学的にちゃんとしたのじゃなくて、解くときの気持ちに近いように書きます。</p>\n<ul>\n<li>ans = (Ai * Aj) の総和（と一時的に呼ぶ）</li>\n<li>Aの要素がansの値に影響するのは、どれかのペアのAiまたはAjであるとき</li>\n<li>具体的に10番目の要素A10をみて、これがAjとして登場するペアの和は</li>\n<li>(A1 * A10) + (A2 * A10) + … + (A9 * A10)</li>\n<li>= (A1 + A2 + … + A9) * A10</li>\n<li>配列を左から見てって、そこまでの総和を覚えてると O(1) で計算できる</li>\n<li>ans = (j=1のとき) + (j=2のとき) + … + (j=Nのとき)</li>\n<li>全体で O(N) でとけるのでTLEにならない</li>\n</ul>\n<p>みたいなことを考えればオッケーです。</p>\n<h2>解答コード</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">MOD</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span>\n\n<span class=\"token constant\">N</span> <span class=\"token operator\">=</span> gets<span class=\"token punctuation\">.</span>to_i\n<span class=\"token constant\">A</span> <span class=\"token operator\">=</span> gets<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:to_i</span><span class=\"token punctuation\">)</span>\n\nsum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nproduct_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>a<span class=\"token operator\">|</span>\n  product_sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sum <span class=\"token operator\">*</span> a\n  product_sum <span class=\"token string\">%= MOD\n  sum +=</span> a\n  sum <span class=\"token operator\">%</span><span class=\"token operator\">=</span> <span class=\"token constant\">MOD</span>\n<span class=\"token keyword\">end</span>\n\nputs product_sum</code></pre></div>\n<p>それぞれの要素について、それより左にある要素の総和と掛け算したのを足してく〜というのをそのまま書きました。\nループがひとつだけでオッケーなところが気持ちよい。</p>\n<p>今回のC問題は文法構造がややこしいところはなくて、考察がちょっといる感じのでした。\nアルゴリズムとしては『累積和』と呼ばれてるやつで、めっちゃよく出てくるやつなので、覚えておくとよいことあります。</p>","frontmatter":{"title":"ABC 177 C - Sum of product of pairs","date":"2020年08月30日","description":"ゆるい感じでABC 177 C問題を解きます〜。累積和のアルゴリズム。言語はruby。"}}},"pageContext":{"slug":"/2020-08-30-abc177/","previous":{"fields":{"slug":"/2020-08-29-goodnight/"},"frontmatter":{"title":"こんばんわ〜自己紹介など"}},"next":null}},"staticQueryHashes":["2841359383","785421583"]}